# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-11-10 15:47
from __future__ import unicode_literals

from django.db import migrations, models
import django_extensions.db.fields
import djchoices.choices
import sortedm2m.fields
import taggit_autosuggest.managers
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('taggit', '0002_auto_20150616_2121'),
        ('course_metadata', '0077_auto_20181026_1505'),
    ]

    operations = [
        migrations.CreateModel(
            name='Simulation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, verbose_name='UUID')),
                ('wordpress_post_id', models.BigIntegerField(blank=True, editable=False, help_text='This is the Wordpress Post id generated from the marketing frontend.', null=True)),
                ('location', models.CharField(max_length=255, unique=True)),
                ('status', models.CharField(choices=[('published', 'Published'), ('unpublished', 'Unpublished')], db_index=True, max_length=255, validators=[djchoices.choices.ChoicesValidator({'published': 'Published', 'unpublished': 'Unpublished'})])),
                ('min_effort', models.DurationField(blank=True, help_text='Estimated number of hours:minutes:seconds [hh:mm:ss] needed to complete this simulation.', null=True)),
                ('max_effort', models.DurationField(blank=True, help_text='Average number of hours:minutes:seconds [hh:mm:ss] needed to complete this simulation.', null=True)),
                ('title', models.CharField(blank=True, default=None, max_length=255, null=True)),
                ('full_description_override', models.TextField(blank=True, default=None, help_text="Full description specific for this simulation. Leave this value blank to default to the parent course's full_description attribute.", null=True)),
                ('simulation_mode', models.CharField(blank=True, choices=[('augmented', 'Augmented'), ('desktop', 'Desktop'), ('immersive', 'Immersive'), ('mixed', 'Mixed')], db_index=True, max_length=255, null=True, validators=[djchoices.choices.ChoicesValidator({'augmented': 'Augmented', 'desktop': 'Desktop', 'immersive': 'Immersive', 'mixed': 'Mixed'})])),
                ('slug', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('mobile_available', models.BooleanField(default=False)),
                ('hidden', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ('-modified', '-created'),
                'get_latest_by': 'modified',
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='chapter',
            name='tags',
            field=taggit_autosuggest.managers.TaggableManager(blank=True, help_text='These tags are automatically generated from the Sequentials that it has references too.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='sequential',
            name='tags',
            field=taggit_autosuggest.managers.TaggableManager(blank=True, help_text='Pick a tag from the suggestions. To make a new tag, add a comma after the tag name.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AlterField(
            model_name='courserun',
            name='tags',
            field=taggit_autosuggest.managers.TaggableManager(blank=True, help_text='These tags are automatically generated from the Chapters that it has references too.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='course_runs',
            field=sortedm2m.fields.SortedManyToManyField(help_text=None, related_name='simulation_sequentials', to='course_metadata.Sequential'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='objectives',
            field=sortedm2m.fields.SortedManyToManyField(help_text=None, related_name='simulation_objectives', to='course_metadata.Objective'),
        ),
        migrations.AddField(
            model_name='simulation',
            name='tags',
            field=taggit_autosuggest.managers.TaggableManager(blank=True, help_text='Pick a tag from the suggestions. To make a new tag, add a comma after the tag name.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
